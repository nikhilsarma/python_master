import pyodbc
import xlsxwriter
import os
import time,datetime


os.chdir("C://Users//n.kadayinti//Desktop//hadoop_haas/HSP_HAAS//haas_hsp")
#workbook = xlsxwriter.Workbook('nik_scheck.xlsx', {'constant_memory': True})

workbook = xlsxwriter.Workbook('hsp_mly.xlsx', {'constant_memory': True})
worksheet = workbook.add_worksheet()
bold_italic_f = workbook.add_format({'bold': True, 'italic':True})
bold_f = workbook.add_format({'bold': True})
number_f = workbook.add_format({'num_format': '###,##0.00;[Red](###,##0.00);"-"'})

db1= 'db_uat5'
cnxn_1 = pyodbc.connect('DSN='+db1)
cur1 = cnxn_1.cursor()
print "connection established"

old_q = """
Select NZ_Script from (
Select distinct 'Select Count(1),' as NZ_Script,name from _v_relation_column 
where NAME = 'Table'
union all
Select distinct 'SUM('||ATTNAME||') AS ' ||ATTNAME||',' as NZ_Script, name from _v_relation_column 
where FORMAT_TYPE like 'NUMERIC%'
AND NAME = 'Table'
Union
Select distinct 'SUM('||ATTNAME||') AS ' ||ATTNAME||',' as NZ_Script, name from _v_relation_column 
where FORMAT_TYPE like 'DOUBLE PRECISION'
AND NAME = 'Table'
Union all
Select distinct 'From '||NAME||';' as NZ_Script, name from _v_relation_column 
where NAME = 'Table'
) AS A order by A.NZ_Script DESC;
"""

#tb_list = ['STG_PKS_D_ACCOUNT_STATUS_HIER_HAAS_MLY', 'STG_PKS_D_AR_PURPOSE_HIER_HAAS_MLY','STG_PKS_D_ASSET_CLASS_HAAS_MLY', 'STG_PKS_D_ASSOC_CHANNEL_ASSIGNMENT_HAAS_MLY', 'STG_PKS_D_ASSOC_OFFICER_HAAS_MLY', 'STG_PKS_D_BAL_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_CHARGE_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_CLOSURE_REASON_HIER_HAAS_MLY', 'STG_PKS_D_COLLATERAL_REMRGN_FREQ_HIER_HAAS_MLY', 'STG_PKS_D_COLLATERAL_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_COLLATERAL_VAL_SRC_HIER_HAAS_MLY', 'STG_PKS_D_COLLATERAL_VAL_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_COUNTRY_HIER_HAAS_MLY', 'STG_PKS_D_COUNTRY_LIMIT_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_COUNTRY_MARKET_CLASS_HAAS_MLY', 'STG_PKS_D_COUNTRY_ORG_TIER_HAAS_MLY', 'STG_PKS_D_COUNTRY_ORG_TIER_ASSIGNMENT_HAAS_MLY', 'STG_PKS_D_COUNTRY_ORG_TIER_REGION_HAAS_MLY', 'STG_PKS_D_CREDIT_ACTION_TYPE_HAAS_MLY', 'STG_PKS_D_CREDIT_ACTION_UW_VARIANCE_LINKED_TYPE_HAAS_MLY', 'STG_PKS_D_CUSTOMER_HAAS_MLY', 'STG_PKS_D_CUSTOMER_FAMILY_GROUP_HAAS_MLY', 'STG_PKS_D_CUSTOMER_GWIM_HAAS_MLY', 'STG_PKS_D_CUSTOMER_LEGAL_CLASS_HAAS_MLY', 'STG_PKS_D_CUSTOMER_PRDS_HAAS_MLY', 'STG_PKS_D_DELINQUENCY_HIER_HAAS_MLY', 'STG_PKS_D_EXPSR_HIER_HAAS_MLY', 'STG_PKS_D_FDIC_HIGHER_RISK_EXCEPTION_HAAS_MLY', 'STG_PKS_D_FINANCIAL_STATEMENT_HIER_HAAS_MLY', 'STG_PKS_D_FOREIGN_EXCHANGE_RT_HAAS_MLY', 'STG_PKS_D_GEOGRAPHY_TIER_HAAS_MLY', 'STG_PKS_D_GL_ACCOUNT_HIER_HAAS_MLY', 'STG_PKS_D_GUARANTEE_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_INDUSTRY_HIER_HAAS_MLY', 'STG_PKS_D_INSTRUMENT_HIER_HAAS_MLY', 'STG_PKS_D_LEGAL_ENTITY_HIER_HAAS_MLY', 'STG_PKS_D_LIEN_HIER_HAAS_MLY', 'STG_PKS_D_LIMIT_TYPE_HAAS_MLY', 'STG_PKS_D_NON_PERFORMING_STATUS_HAAS_MLY', 'STG_PKS_D_NON_PERFORMING_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_PERIOD_HAAS_MLY', 'STG_PKS_D_POSTAL_HIER_HAAS_MLY', 'STG_PKS_D_PRODUCT_HIER_HAAS_MLY', 'STG_PKS_D_REPAYMENT_SRC_HIER_HAAS_MLY', 'STG_PKS_D_REPAYMENT_TYPE_HIER_HAAS_MLY', 'STG_PKS_D_RISK_RATING_HIER_HAAS_MLY', 'STG_PKS_D_RT_INDEX_HAAS_MLY', 'STG_PKS_D_STD_UNIT_HIER_HAAS_MLY', 'STG_PKS_D_SUPPORT_DOC_HIER_HAAS_MLY', 'STG_PKS_D_SYS_HAAS_MLY', 'STG_PKS_D_UNDERWRITING_VARIANCE_ALT_CLASS_HAAS_MLY', 'STG_PKS_D_UNDERWRITING_VARIANCE_HIER_HAAS_MLY', 'STG_PKS_D_UNDERWRITING_VARIANCE_REMOVAL_CD_HAAS_MLY', 'STG_PKS_F_AGG_CUSTOMER_EXPSR_HAAS_MLY', 'STG_PKS_F_BILLING_SCHEDULE_HAAS_MLY', 'STG_PKS_F_COLLATERAL_HAAS_MLY', 'STG_PKS_F_COUNTRY_LIMITS_RULES_HAAS_MLY', 'STG_PKS_F_CREDIT_ACTION_HAAS_MLY', 'STG_PKS_F_CUSTOMER_FINANCIAL_STATEMENT_HAAS_MLY', 'STG_PKS_F_FACILITY_LIMIT_HAAS_MLY', 'STG_PKS_F_FACILITY_RISK_UNADJ_HAAS_MLY', 'STG_PKS_F_FACILITY_UNADJ_HAAS_MLY', 'STG_PKS_F_FVO_MTM_PRICE_HAAS_MLY', 'STG_PKS_F_GUARANTEE_HAAS_MLY', 'STG_PKS_F_LOSS_AND_RECVRY_HAAS_MLY', 'STG_PKS_F_OBLIGATION_RLTNSHP_HAAS_MLY', 'STG_PKS_F_PARTICIPATION_HAAS_MLY', 'STG_PKS_F_PARTICIPATION_VAL_HAAS_MLY', 'STG_PKS_F_PAST_DUE_HAAS_MLY', 'STG_PKS_F_PRICING_HAAS_MLY', 'STG_PKS_F_SUPPORT_DOC_HAAS_MLY', 'STG_PKS_F_UNDERWRITING_VARIANCE_HAAS_MLY', 'STG_PKS_F_UTILIZATION_REPAYMENT_SCHEDULE_HAAS_MLY', 'STG_PKS_F_UTILIZATION_RISK_UNADJ_HAAS_MLY', 'STG_PKS_F_UTILIZATION_UNADJ_HAAS_MLY', 'STG_PKS_RAROC_SURRKEYS_HAAS_MLY', 'STG_PKS_UNIT_COUNTRY_COMPANY_ADDL_INFO_HAAS_MLY']
tb_list = ['STG_PKS_D_ACCOUNT_STATUS_HIER_HSP_MLY','STG_PKS_D_AR_PURPOSE_HIER_HSP_MLY', 'STG_PKS_D_ASSET_CLASS_HSP_MLY', 'STG_PKS_D_ASSOC_CHANNEL_ASSIGNMENT_HSP_MLY', 'STG_PKS_D_ASSOC_OFFICER_HSP_MLY', 'STG_PKS_D_BAL_TYPE_HIER_HSP_MLY', 'STG_PKS_D_CHARGE_TYPE_HIER_HSP_MLY', 'STG_PKS_D_CLOSURE_REASON_HIER_HSP_MLY', 'STG_PKS_D_COLLATERAL_REMRGN_FREQ_HIER_HSP_MLY', 'STG_PKS_D_COLLATERAL_TYPE_HIER_HSP_MLY', 'STG_PKS_D_COLLATERAL_VAL_SRC_HIER_HSP_MLY', 'STG_PKS_D_COLLATERAL_VAL_TYPE_HIER_HSP_MLY', 'STG_PKS_D_COUNTRY_HIER_HSP_MLY', 'STG_PKS_D_COUNTRY_LIMIT_TYPE_HIER_HSP_MLY', 'STG_PKS_D_COUNTRY_MARKET_CLASS_HSP_MLY', 'STG_PKS_D_COUNTRY_ORG_TIER_HSP_MLY', 'STG_PKS_D_COUNTRY_ORG_TIER_ASSIGNMENT_HSP_MLY', 'STG_PKS_D_COUNTRY_ORG_TIER_REGION_HSP_MLY', 'STG_PKS_D_CREDIT_ACTION_TYPE_HSP_MLY', 'STG_PKS_D_CREDIT_ACTION_UW_VARIANCE_LINKED_TYPE_HSP_MLY', 'STG_PKS_D_CUSTOMER_HSP_MLY', 'STG_PKS_D_CUSTOMER_FAMILY_GROUP_HSP_MLY', 'STG_PKS_D_CUSTOMER_GWIM_HSP_MLY', 'STG_PKS_D_CUSTOMER_LEGAL_CLASS_HSP_MLY', 'STG_PKS_D_CUSTOMER_PRDS_HSP_MLY', 'STG_PKS_D_DELINQUENCY_HIER_HSP_MLY', 'STG_PKS_D_EXPSR_HIER_HSP_MLY', 'STG_PKS_D_FDIC_HIGHER_RISK_EXCEPTION_HSP_MLY', 'STG_PKS_D_FINANCIAL_STATEMENT_HIER_HSP_MLY', 'STG_PKS_D_FOREIGN_EXCHANGE_RT_HSP_MLY', 'STG_PKS_D_GEOGRAPHY_TIER_HSP_MLY', 'STG_PKS_D_GL_ACCOUNT_HIER_HSP_MLY', 'STG_PKS_D_GUARANTEE_TYPE_HIER_HSP_MLY', 'STG_PKS_D_INDUSTRY_HIER_HSP_MLY', 'STG_PKS_D_INSTRUMENT_HIER_HSP_MLY', 'STG_PKS_D_LEGAL_ENTITY_HIER_HSP_MLY', 'STG_PKS_D_LIEN_HIER_HSP_MLY', 'STG_PKS_D_LIMIT_TYPE_HSP_MLY', 'STG_PKS_D_NON_PERFORMING_STATUS_HSP_MLY', 'STG_PKS_D_NON_PERFORMING_TYPE_HIER_HSP_MLY', 'STG_PKS_D_PERIOD_HSP_MLY', 'STG_PKS_D_POSTAL_HIER_HSP_MLY', 'STG_PKS_D_PRODUCT_HIER_HSP_MLY', 'STG_PKS_D_REPAYMENT_SRC_HIER_HSP_MLY', 'STG_PKS_D_REPAYMENT_TYPE_HIER_HSP_MLY', 'STG_PKS_D_RISK_RATING_HIER_HSP_MLY', 'STG_PKS_D_RT_INDEX_HSP_MLY', 'STG_PKS_D_STD_UNIT_HIER_HSP_MLY', 'STG_PKS_D_SUPPORT_DOC_HIER_HSP_MLY', 'STG_PKS_D_SYS_HSP_MLY', 'STG_PKS_D_UNDERWRITING_VARIANCE_ALT_CLASS_HSP_MLY', 'STG_PKS_D_UNDERWRITING_VARIANCE_HIER_HSP_MLY', 'STG_PKS_D_UNDERWRITING_VARIANCE_REMOVAL_CD_HSP_MLY', 'STG_PKS_F_AGG_CUSTOMER_EXPSR_HSP_MLY', 'STG_PKS_F_BILLING_SCHEDULE_HSP_MLY', 'STG_PKS_F_COLLATERAL_HSP_MLY', 'STG_PKS_F_COUNTRY_LIMITS_RULES_HSP_MLY', 'STG_PKS_F_CREDIT_ACTION_HSP_MLY', 'STG_PKS_F_CUSTOMER_FINANCIAL_STATEMENT_HSP_MLY', 'STG_PKS_F_FACILITY_LIMIT_HSP_MLY', 'STG_PKS_F_FACILITY_RISK_UNADJ_HSP_MLY', 'STG_PKS_F_FACILITY_UNADJ_HSP_MLY', 'STG_PKS_F_FVO_MTM_PRICE_HSP_MLY', 'STG_PKS_F_GUARANTEE_HSP_MLY', 'STG_PKS_F_LOSS_AND_RECVRY_HSP_MLY', 'STG_PKS_F_OBLIGATION_RLTNSHP_HSP_MLY', 'STG_PKS_F_PARTICIPATION_HSP_MLY', 'STG_PKS_F_PARTICIPATION_VAL_HSP_MLY', 'STG_PKS_F_PAST_DUE_HSP_MLY', 'STG_PKS_F_PRICING_HSP_MLY', 'STG_PKS_F_SUPPORT_DOC_HSP_MLY', 'STG_PKS_F_UNDERWRITING_VARIANCE_HSP_MLY', 'STG_PKS_F_UTILIZATION_REPAYMENT_SCHEDULE_HSP_MLY', 'STG_PKS_F_UTILIZATION_RISK_UNADJ_HSP_MLY', 'STG_PKS_F_UTILIZATION_UNADJ_HSP_MLY', 'STG_PKS_RAROC_SURRKEYS_HSP_MLY', 'STG_PKS_UNIT_COUNTRY_COMPANY_ADDL_INFO_HSP_MLY']

tosql_qry = []
def final(query):
    x = cur1.execute(query)
    a = x.fetchall()
    f_qry = ''
    for e in range(len(a)):
        if e == len(a)-2:
            f_qry = f_qry + a[e][0].replace(',',' ')
        else:
            f_qry = f_qry + a[e][0]
    tosql_qry.append(f_qry)
    return f_qry

def todb(q):
        try:
            xyz = cur1.execute(q)
            columns = [t[0] for t in xyz.description]
            result = xyz.fetchall()
            #print "hey"
            #print [columns,result]
        except Exception as e:
            #print "nikhil printing errors"
            print e,e.message
            print q
            columns,result = ['Error'], [(e.message, )]
        #finally:
            #return ['error',0]
        return [columns,result]
    

def new_q(s):
    return old_q.replace("NAME = 'Table'", "NAME = '" + str(s)+"'")

row = 0
for tname in tb_list:
    qry1= new_q(tname)
    qry2 = final(qry1)
    res = todb(qry2)
    #print res[0]
    print tname
    worksheet.write(row,0, tname, bold_italic_f)
    for e in enumerate(res[0]):
        worksheet.write(row+1,e[0],e[1],bold_f)
        #print "i am here nikhil"
    for e in enumerate(res[1][0]):
        #print "i am now here fellow"
        worksheet.write(row+2,e[0],e[1])
    row += 4
   
workbook.close()

    

            
    
    
    
